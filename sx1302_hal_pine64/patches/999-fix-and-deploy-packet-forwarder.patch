--- a/packet_forwarder/src/lora_pkt_fwd.c
+++ b/packet_forwarder/src/lora_pkt_fwd.c
@@ -1968,7 +1968,7 @@ void thread_up(void) {
     struct tref local_ref; /* time reference used for UTC <-> timestamp conversion */
 
     /* data buffers */
-    uint8_t buff_up[TX_BUFF_SIZE]; /* buffer to compose the upstream packet */
+    uint8_t* buff_up = (uint8_t*)malloc(TX_BUFF_SIZE*sizeof(uint8_t)); /* buffer to compose the upstream packet */
     int buff_index;
     uint8_t buff_ack[32]; /* buffer to receive acknowledges */
 
@@ -2484,6 +2484,7 @@ void thread_up(void) {
         }
         pthread_mutex_unlock(&mx_meas_up);
     }
+    free(buff_up);
     MSG("\nINFO: End of upstream thread\n");
 }
 
--- a/libloragw/src/loragw_stts751.c
+++ b/libloragw/src/loragw_stts751.c
@@ -78,105 +78,13 @@ License: Revised BSD License, see LICENS
 /* --- PUBLIC FUNCTIONS DEFINITION ------------------------------------------ */
 
 int stts751_configure(int i2c_fd, uint8_t i2c_addr) {
-    int err;
-    uint8_t val;
-
-    /* Check Input Params */
-    if (i2c_fd <= 0) {
-        printf("ERROR: invalid I2C file descriptor\n");
-        return LGW_I2C_ERROR;
-    }
-
-    DEBUG_PRINTF("INFO: configuring STTS751 temperature sensor on 0x%02X...\n", i2c_addr);
-
-    /* Get product ID  and test which sensor is mounted */
-    err = i2c_linuxdev_read(i2c_fd, i2c_addr, STTS751_REG_PROD_ID, &val);
-    if (err != 0) {
-        DEBUG_PRINTF("ERROR: failed to read I2C device 0x%02X (err=%i)\n", i2c_addr, err);
-        return LGW_I2C_ERROR;
-    }
-    switch (val) {
-        case STTS751_0_PROD_ID:
-            DEBUG_MSG("INFO: Product ID: STTS751-0\n");
-            break;
-        case STTS751_1_PROD_ID:
-            DEBUG_MSG("INFO: Product ID: STTS751-1\n");
-            break;
-        default:
-            printf("ERROR: Product ID: UNKNOWN\n");
-            return LGW_I2C_ERROR;
-    }
-
-    /* Get Manufacturer ID */
-    err = i2c_linuxdev_read(i2c_fd, i2c_addr, STTS751_REG_MAN_ID, &val);
-    if (err != 0) {
-        DEBUG_PRINTF("ERROR: failed to read I2C device 0x%02X (err=%i)\n", i2c_addr, err);
-        return LGW_I2C_ERROR;
-    }
-    if (val != ST_MAN_ID) {
-        printf("ERROR: Manufacturer ID: UNKNOWN\n");
-        return LGW_I2C_ERROR;
-    } else {
-        DEBUG_PRINTF("INFO: Manufacturer ID: 0x%02X\n", val);
-    }
-
-    /* Get revision number */
-    err = i2c_linuxdev_read(i2c_fd, i2c_addr, STTS751_REG_REV_ID, &val);
-    if (err != 0) {
-        DEBUG_PRINTF("ERROR: failed to read I2C device 0x%02X (err=%i)\n", i2c_addr, err);
-        return LGW_I2C_ERROR;
-    }
-    DEBUG_PRINTF("INFO: Revision number: 0x%02X\n", val);
-
-    /* Set conversion resolution to 12 bits */
-    err = i2c_linuxdev_write(i2c_fd, i2c_addr, STTS751_REG_CONF, 0x8C); /* TODO: do not hardcode the whole byte */
-    if (err != 0) {
-        DEBUG_PRINTF("ERROR: failed to write I2C device 0x%02X (err=%i)\n", i2c_addr, err);
-        return LGW_I2C_ERROR;
-    }
-
-    /* Set conversion rate to 1 / second */
-    err = i2c_linuxdev_write(i2c_fd, i2c_addr, STTS751_REG_RATE, 0x04);
-    if (err != 0) {
-        DEBUG_PRINTF("ERROR: failed to write I2C device 0x%02X (err=%i)\n", i2c_addr, err);
-        return LGW_I2C_ERROR;
-    }
-
     return LGW_I2C_SUCCESS;
 }
 
 /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
 
 int stts751_get_temperature(int i2c_fd, uint8_t i2c_addr, float * temperature) {
-    int err;
-    uint8_t high_byte, low_byte;
-    int8_t h;
-
-    /* Check Input Params */
-    if (i2c_fd <= 0) {
-        printf("ERROR: invalid I2C file descriptor\n");
-        return LGW_I2C_ERROR;
-    }
-
-    /* Read Temperature LSB */
-    err = i2c_linuxdev_read(i2c_fd, i2c_addr, STTS751_REG_TEMP_L, &low_byte);
-    if (err != 0) {
-        printf("ERROR: failed to read I2C device 0x%02X (err=%i)\n", i2c_addr, err);
-        return LGW_I2C_ERROR;
-    }
-
-    /* Read Temperature MSB */
-    err = i2c_linuxdev_read(i2c_fd, i2c_addr, STTS751_REG_TEMP_H, &high_byte);
-    if (err != 0) {
-        printf("ERROR: failed to read I2C device 0x%02X (err=%i)\n", i2c_addr, err);
-        return LGW_I2C_ERROR;
-    }
-
-    h = (int8_t)high_byte;
-    *temperature = ((h << 8) | low_byte) / 256.0;
-
-    DEBUG_PRINTF("Temperature: %f C (h:0x%02X l:0x%02X)\n", *temperature, high_byte, low_byte);
-
+    *temperature = 0.0f;
     return LGW_I2C_SUCCESS;
 }
 
--- a/libloragw/src/loragw_hal.c
+++ b/libloragw/src/loragw_hal.c
@@ -1094,6 +1094,7 @@ int lgw_start(void) {
 
     if (CONTEXT_COM_TYPE == LGW_COM_SPI) {
         /* Find the temperature sensor on the known supported ports */
+	/*    
         for (i = 0; i < (int)(sizeof I2C_PORT_TEMP_SENSOR); i++) {
             ts_addr = I2C_PORT_TEMP_SENSOR[i];
             err = i2c_linuxdev_open(I2C_DEVICE, ts_addr, &ts_fd);
@@ -1116,6 +1117,7 @@ int lgw_start(void) {
             printf("ERROR: no temperature sensor found.\n");
             return LGW_HAL_ERROR;
         }
+	*/
 
         /* Configure ADC AD338R for full duplex (CN490 reference design) */
         if (CONTEXT_BOARD.full_duplex == true) {
